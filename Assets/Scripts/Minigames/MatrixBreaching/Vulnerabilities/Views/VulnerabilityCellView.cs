using DG.Tweening;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Options;
using Minigames.MatrixBreaching.Matrix.Data;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using Utils;

namespace Minigames.MatrixBreaching.Vulnerabilities.Views
{
    public class VulnerabilityCellView : MonoBehaviour, IPointerDownHandler, IPointerUpHandler
    {
        [SerializeField] private TextMeshProUGUI _valueText;
        [SerializeField] private Image _background;
        [SerializeField, ColorUsage(true, true)] private Color _defaultColor;
        [SerializeField, ColorUsage(true, true)] private Color _litColor;
        public bool IsLit { get; private set; }
        private Tweener _highlightAnimation;


        public void Initialize(CellValueType cellValueType)
        {
            _valueText.text = cellValueType.ToTextString();
        }

        public void SetHighlightActive(bool isActive, bool animate = true)
        {
            IsLit = isActive;
            if (_highlightAnimation.IsActive())
                _highlightAnimation.Kill();
            var newColor = IsLit ? _litColor : _defaultColor;
            
            if (animate)
                _highlightAnimation = _background.DOColor(newColor, 0.4f);
            else
                _background.color = newColor;
        }

        public void OnPointerDown(PointerEventData eventData)
        {
            throw new System.NotImplementedException();
        }

        public void OnPointerUp(PointerEventData eventData)
        {
            throw new System.NotImplementedException();
        }
    }
}