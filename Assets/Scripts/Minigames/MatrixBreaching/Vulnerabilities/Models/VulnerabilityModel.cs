using System.Collections.Generic;
using System.Linq;
using Minigames.MatrixBreaching.Core.Services;
using Minigames.MatrixBreaching.Matrix.Data;
using Minigames.MatrixBreaching.Matrix.Models;
using Minigames.MatrixBreaching.Matrix.Models.Cells;
using UniRx;
using UnityEngine;
using Utils.Inventory;

namespace Minigames.MatrixBreaching.Vulnerabilities.Models
{
    public class VulnerabilityModel : IModel<string>
    {
        private readonly MatrixBreachingService _matrixBreachingService;
        private ReactiveProperty<int> _matchedSize = new ReactiveProperty<int>();
        private IList<CellValueType> _vulnerabilitySequence;
        private IList<ValueCell> _matchedSequence;
        public List<CellValueType> VulnerabilitySequence => _vulnerabilitySequence.ToList();
        public List<ValueCell> MatchedSequence => _matchedSequence.ToList();
        public IReadOnlyReactiveProperty<int> MatchedSize => _matchedSize;

        public IReadOnlyReactiveProperty<bool> IsVulnerabilityCompleted =>
            MatchedSize.Select(matchedSize => matchedSize >= SequenceSize).ToReadOnlyReactiveProperty();
        public int SequenceSize => IsInitialized ? VulnerabilitySequence.Count : 0;
        public string Id { get; }
        public bool IsInitialized => _vulnerabilitySequence != null && _vulnerabilitySequence.Count > 0;
        public int BreachDamage { get; private set; }

        public VulnerabilityModel(string id, MatrixBreachingService matrixBreachingService)
        {
            _matrixBreachingService = matrixBreachingService;
            Id = id;
        }

        public void Initialize(List<CellValueType> vulnerabilitySequence)
        {
            _vulnerabilitySequence = vulnerabilitySequence.AsReadOnly();
            BreachDamage = Mathf.RoundToInt(SequenceSize * _matrixBreachingService.AttachedVirus.Value.BreachDamage);
        }

        public void SetMatchedMatrixSequence(IList<ValueCell> matchedSequence)
        {
            _matchedSequence = matchedSequence;
            _matchedSize.Value = Mathf.Clamp(matchedSequence.Count, 0, SequenceSize);
        }
    }
}