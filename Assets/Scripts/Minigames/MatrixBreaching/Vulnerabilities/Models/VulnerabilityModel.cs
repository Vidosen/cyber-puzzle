using System.Collections.Generic;
using System.Collections.ObjectModel;
using Minigames.MatrixBreaching.Matrix.Data;
using UniRx;
using UnityEngine;
using Utils.Inventory;

namespace Minigames.MatrixBreaching.Vulnerabilities.Models
{
    public class VulnerabilityModel : IModel<string>
    {
        private ReactiveProperty<int> _matchedSequenceSize = new ReactiveProperty<int>();
        public ReadOnlyCollection<CellValueType> VulnerabilitySequence { get; private set; }
        public IReadOnlyReactiveProperty<int> MatchedSequenceSize => _matchedSequenceSize;

        public IReadOnlyReactiveProperty<bool> IsVulnerabilityMatched =>
            MatchedSequenceSize.Select(matchedSize => matchedSize >= SequenceSize).ToReadOnlyReactiveProperty();
        public int SequenceSize => IsInitialized ? VulnerabilitySequence.Count : 0;
        public string Id { get; }
        public bool IsInitialized => VulnerabilitySequence != null && SequenceSize > 0;

        public VulnerabilityModel(string id)
        {
            Id = id;
        }

        public void Initialize(List<CellValueType> vulnerabilitySequence)
        {
            VulnerabilitySequence = vulnerabilitySequence.AsReadOnly();
        }

        public void SetMatchedSequenceSize(int matchedSequenceSize)
        {
            _matchedSequenceSize.Value = Mathf.Clamp(matchedSequenceSize, 0, SequenceSize);
        }
    }
}