using System;
using System.Linq;
using Cysharp.Threading.Tasks;
using Minigames.MatrixBreaching.Matrix.Models;
using Minigames.MatrixBreaching.Vulnerabilities.Models;
using Zenject;

namespace Minigames.MatrixBreaching.Vulnerabilities.Services
{
    public class VulnerabilityService : IInitializable
    {
        private readonly VulnerabiltyInventory _vulnerabiltyInventory;
        private readonly GuardMatrix _matrix;
        private Random _random;

        public VulnerabilityService(VulnerabiltyInventory vulnerabiltyInventory, GuardMatrix matrix)
        {
            _vulnerabiltyInventory = vulnerabiltyInventory;
            _matrix = matrix;
        }
        public VulnerabilityModel CreateNewVulnerability(int length, GuardMatrix holderMatrix)
        {
            var cells = holderMatrix.GetCells();
            var selectedCellsSequence = cells.Where(cell => cell is ValueCell)
                .OrderBy(_ => _random.Next())
                .Take(length)
                .Select(cell => ((ValueCell)cell))
                .ToList();
            
            var vulnerabilitySequence = selectedCellsSequence
                .Select(cell => cell.Value)
                .ToList();
            
            return _vulnerabiltyInventory.CreateNewModel(vulnerabilitySequence, out var _);
        }

        public async void Initialize()
        {
            if (!_matrix.IsInitialized)
                await UniTask.WaitUntil(() => _matrix.IsInitialized);
            CreateNewVulnerability(4, _matrix);
            CreateNewVulnerability(4, _matrix);
        }

        public void SetRandomSeed(int seed)
        {
            _random = new Random(seed);
        }
    }
}