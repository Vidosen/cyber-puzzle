using System;
using Minigames.MatrixBreaching.Vulnerabilities;
using Minigames.MatrixBreaching.Vulnerabilities.Models;
using UniRx;
using Zenject;

namespace Minigames.MatrixBreaching.Core.Rules
{
    public class AddProgressForRemovedVulnerabilityRule : IInitializable, IDisposable
    {
        private readonly MatrixBreachingModel _matrixBreachingModel;
        private readonly VulnerabiltyInventory _vulnerabiltyInventory;
        private IDisposable _stream;

        public AddProgressForRemovedVulnerabilityRule(MatrixBreachingModel matrixBreachingModel, VulnerabiltyInventory vulnerabiltyInventory)
        {
            _matrixBreachingModel = matrixBreachingModel;
            _vulnerabiltyInventory = vulnerabiltyInventory;
        }

        public void Initialize()
        {
            _stream = _vulnerabiltyInventory.ModelRemoved.Subscribe(removed => AddProgress(removed.Value));
        }

        private void AddProgress(VulnerabilityModel removedValue)
        {
            _matrixBreachingModel.AddProgress(removedValue.BreachDamage);
        }

        public void Dispose()
        {
            _stream?.Dispose();
        }
    }
}